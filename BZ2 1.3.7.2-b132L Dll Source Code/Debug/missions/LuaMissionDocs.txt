Lua Mission Script Documentation. This describes all the functions available for BZ2 Lua Mission Scripting in Battlezone Classic mod. 


-Start() 

Called when the mission starts for the first time.

Use this function to perform any one-time script initialization.

-AddObject(Handle h)

Called after any game object is created.

Handle is the game object that was created.

This function will get a lot of traffic so it should not do too much work.

-DeleteObject(Handle h)

Called before a game object is deleted.

Handle is the game object to be deleted.

This function will get a lot of traffic so it should not do too much work.

-Update()

Called once per tick after updating the network system and before simulating game objects.

This function performs most of the mission script's game logic.

-bool Load(bool missionSave)

Called when loading state from a save game file, allowing the script to restore its state.

Data values returned from Save will be passed as parameters to Load in the same order they were returned. Load supports nil, boolean, handle, integer, number, string, vector, and matrix data types. It does not support function, thread, or arbitrary userdata types.

- bool Save(bool missionSave)

Called when saving state to a save game file, allowing the script to preserve its state.

Any values returned by this function will be passed as parameters to Load when loading the save game file. Save supports nil, boolean, handle, integer, number, string, vector, and matrix data types. It does not support function, thread, or arbitrary userdata types

-bool AddPlayer(DPID id, int Team, bool IsNewPlayer)

Called when a player joins the game world.


-DeletePlayer(DPID id)

Called when a player leaves the game world.


-EjectKillRetCodes PlayerEjected(Handle DeadObjectHandle)

Called when the player Ejects.

-EjectKillRetCodes ObjectKilled(int DeadObjectHandle, int KillersHandle)

Called when an object is killed.

-EjectKillRetCodes ObjectSniped(int DeadObjectHandle, int KillersHandle)

Called when an object is sniped.


-PreOrdnanceHit(Handle shooterHandle, Handle victimHandle, int ordnanceTeam, char* pOrdnanceODF)

Called when an ordnance hits an object. This technically happens just before any damage is applied. Also it only happens when the ordnance hits a vehicle or box/sphere collidable object. Objects that use collision mesh's are technically part of the terrain? sortof...

-PreSnipeReturnCodes PreSnipe(const int curWorld, Handle shooterHandle, Handle victimHandle, int ordnanceTeam, char* pOrdnanceODF)

Called when an object is Sniped. Occurs just before the snipe, and can be used to prevent it from happening.

-PreGetInReturnCodes PreGetIn(const int curWorld, Handle pilotHandle, Handle emptyCraftHandle)

Called when a pilot gets into a ship. Can be used to prevent it.

-PrePickupPowerupReturnCodes PrePickupPowerup(const int curWorld, Handle me, Handle powerupHandle)

Called when a powerup is picked up. Can be used to prevent it.

-PostTargetChangedCallback(Handle craft, Handle previousTarget, Handle currentTarget):

Called when the user? changes targets? Can be used to trigger events on a target change?




-----------------------------BZC LUA Script Utils Commands-----------------

-handle GetHandle ( string label )
-handle GetHandle ( integer SequenceNumber )

Returns the handle of the game object with the given label. Returns nil if none exists.


-long Make_RGB(number red, number green, number blue)

Used to make a color for use in text prints or other color functions.


-long Make_RGBA(number red, number green, number blue, number alpha)

Used to make a color for use in text prints or other color functions. This version has an alpha.


-FailMission ( number time, [ string filename ] )

Fails the mission after the given time elapses. If supplied with a filename (usually a .des), it sets the failure message to text from that file.


-SucceedMission ( number time, [ string filename ] )

Succeeds the mission after the given time elapses. If supplied with a filename (usually a .des), it sets the success message to text from that file.


-ChangeSide()

Used to switch the campaign from ISDF > Scion at ISDF mission 15.


-integer AddScrap ( integer team, integer count )

Adds to the team's scrap count, clamped between zero and maximum count.

Returns the new scrap count.


-integer SetScrap ( integer team, integer count )

Sets the team's scrap count, clamped between zero and maximum count.


-Returns the new scrap count.

integer GetScrap ( integer team )

Returns the team's scrap count.


-integer AddMaxScrap ( integer team, integer count )

Adds to the team's maximum scrap count.

Returns the new maximum scrap count.


-integer SetMaxScrap ( integer team, integer count )

Sets the team's maximum scrap count.

Returns the new maximum scrap count.


-integer GetMaxScrap ( integer team )

Returns the team's maximum scrap count.


-GetTime ()

Returns the elapsed time in seconds since the start of the mission.


-handle GetTug ( handle cargo )

Returns the tug carrying the object. Returns nil if not carried.


-boolean HasCargo ( handle me )

Returns true if the unit is a tug carrying cargo.


-number GetDistance ( handle h1, handle h2 )
-number GetDistance ( handle h1, string path, [ integer point ] )
-number GetDistance ( handle h1, vector position )
-number GetDistance ( handle h1, matrix transform )

Returns the distance in meters between the game object and the position of another object, path, vector, or transform matrix.


-handle GetNearestObject ( handle h )

Returns the nearest object to the handle. Returns nil if none exists.


-handle GetNearestVehicle ( handle h )
-handle GetNearestVehicle ( string path, [ integer point ] )

Returns the vehicle closest to the position of the handle, or path. It uses the start of the path if no point is given. Returns nil if none exists.


-handle GetNearestBuilding ( handle h )

Returns the building closest to the position of the handle. Returns nil if none exists.


-handle GetNearestEnemy ( handle h )

Returns the enemy closest to the position of the handle. Returns nil if none exists.


-handle GetNearestEnemy ( handle h, bool ignorepilots, bool ignorescavs, [ float MaxDist = 450.0f] )

Returns the enemy closest to the position of the handle. Returns nil if none exists. Has optional bools to filter pilots and scavs.


-handle BuildObject ( string odfname, integer team, handle h )
-handle BuildObject ( string odfname, integer team, string path, [ integer point ] )
-handle BuildObject ( string odfname, integer team, vector position )
-handle BuildObject ( string odfname, integer team, matrix transform )

Creates a game object with the given odf name and team number at the position of the handle, path, vector, or transform matrix. It uses the start of the path if no point is given.

Returns the handle of the created object if it created one. Returns nil if it failed.


-RemoveObject ( handle h )

Removes the game object with the given handle.


-number GetFirstEmptyGroup( [number Team] )

Returns the first empty group. If a team number is applied, it uses the Player on that team's groups, else it uses the local players groups. 


-SetGroup(Handle h)

Sets the handle to the specified group. 





AI Commands:

Priority 0 leaves the unit commandable while the default priority 1 makes it uncommandable.

-Attack ( handle me, handle him , [ integer priority ] )

Commands the unit to attack the given target.


-Service ( handle me, handle him , [ integer priority ] )

Commands the unit to service the given target.


-Goto ( handle me, string path , [integer point] , [ integer priority ] )
-Goto ( handle me, handle him , [ integer priority ] )
-Goto ( handle me, vector position , [ integer priority ] )
-Goto ( handle me, matrix transform , [ integer priority ] )

Commands the unit to go to the position of the given handle, path, vector, or transform matrix.


-Mine ( handle me, handle him, [ integer priority ] )
-Mine ( handle me, vector position, [ integer priority ] )
-Mine ( handle me, matrix transform, [ integer priority ] )
-Mine ( handle me, string path , [integer point] , [ integer priority ] )

Commands the unit to lay mines at the handle, path, vector, or transform matrix; only minelayer units support this.


-Follow ( handle me, handle him, [ integer priority ] )

Commands the unit to follow the given target.


-Defend ( handle me, [ integer priority ] )

Commands the unit to defend its current location.


-Defend2 ( handle me, handle him, [ integer priority ] )

Commands the unit to defend the given target.


-Stop ( handle me, [ integer priority ] )

Commands the unit to stop at its current location.


-Patrol ( handle me, string path, [ integer priority ] )

Commands the unit to patrol along the named path. This is equivalent to Goto with an independence of 1.


-Retreat ( handle me, Vector Where, [ integer priority ] )
-Retreat ( handle me, Matrix Where, [ integer priority ] )
-Retreat ( handle me, string path, [ integer point] , [ integer priority ] )
-Retreat ( handle me, handle him , [ integer priority ] )

Commands the unit to retreat to the given target. This is equivalent to Goto with an independence of 0.


-GetIn ( handle me, handle him, [ integer priority ] )

Commands the pilot to get into the target vehicle.


-Pickup ( handle me, handle him, [ integer priority ] )

Commands the unit to pick up the target object. Deployed units pack up (ignoring the target), scavengers pick up scrap, and tugs pick up and carry objects.


-Dropoff ( handle me, string path, [integer point] , [ integer priority ] )
-Dropoff ( handle me, vector position, [ integer priority ] )
-Dropoff ( handle me, matrix transform, [ integer priority ] )
-Dropoff ( handle me, handle him, [ integer priority ] )

Commands the unit to drop off at the position of the transform matrix. Tugs drop off their cargo and Construction Rigs build the selected item with the facing of the transform matrix.


-Build ( handle me, string odfname, [ integer priority ] )

Commands a producer to build the given odf name. The Armory and Construction Rig need an additional Dropoff to give them a location to build but first need at least one simulation update to process the Build.


-LookAt ( handle me, handle him, [ integer priority ] )

Commands the unit to look at the given target.


-AllLookAt ( number team, handle him, [ integer priority ] )

Commands all the units on the given team to look at the given target.



-boolean IsOdf ( handle h, string odfname )

Returns true if the game object's odf name matches the given odf name. Returns false otherwise.


-string GetRace ( handle h)

Returns the race letter for the given handle. (First letter of the ODF)


-handle GetPlayerHandle ()

Returns the game object controlled by the local player. Returns nil if none exists.


-handle GetPlayerHandle ( integer team )

Returns the game object controlled by the player on the given team. Returns nil if none exists.


-boolean IsAlive ( handle h )

Returns true if the game object exists and (if the object is a vehicle) controlled. Returns false otherwise.


-boolean IsFlying ( handle h )

Returns true if the game object is flagged as flying. Returns false otherwise.


-boolean IsAliveAndPilot ( handle h )

Returns true if the game object exists and (if the object is a vehicle) controlled and piloted. Returns false otherwise.


-boolean IsValid ( handle h )
-boolean IsAround ( handle h )

Returns true if the game object exists. Returns false otherwise.


-handle InBuilding ( handle h )

Returns the handle of the building the handle h is in (logged into?). returns 0 if not in a building.


-handle AtTerminal ( handle h )

Returns the handle of the building the handle h is logged into?. returns 0 if not in a building.


-vector GetPosition ( handle h )
-vector GetPosition ( string path, [ integer point ] )

Returns the object or path point's position vector. Returns nil if none exists.


-vector GetPosition2 ( handle h )

Returns the game object's position vector, can be used in DeleteObject on recently Dead items. 


-vector GetFront ( handle h )

Returns the game object's front vector. Returns nil if none exists.


-SetPosition ( handle h, string path, [ integer point ] )
-SetPosition ( handle h, vector position )
-SetPosition ( handle h, handle h2 )

Teleports the game object to the position Vector.


-Damage ( handle h, number amount )

Applies damage to the game object.


-number GetHealth ( handle h )

Returns the fractional health of the game object between 0 and 1.


-number GetCurHealth ( handle h )

Returns the current health value of the game object.


-number GetMaxHealth ( handle h )

Returns the maximum health value of the game object.


-SetCurHealth ( handle h, number health )

Sets the current health of the game object.


-SetMaxHealth ( handle h, number health )

Sets the maximum health of the game object.


-AddHealth ( handle h, number health )

Adds to the current health of the game object.


-number GetAmmo ( handle h )

Returns the fractional ammo of the game object between 0 and 1.


-number GetCurAmmo ( handle h )

Returns the current ammo value of the game object.


-number GetMaxAmmo ( handle h )

Returns the maximum ammo value of the game object.


-SetCurAmmo ( handle h, number ammo )

Sets the current ammo of the game object.


-SetMaxAmmo ( handle h, number ammo )

Sets the maximum ammo of the game object.


-AddAmmo ( handle h, number ammo )

Adds to the current ammo of the game object.


-integer GetTeamNum ( handle h )

Returns the game object's team number.


-SetTeamNum ( handle h, integer team )

Sets the game object's team number.


-vector SetVelocity ( handle h )

Sets the game object's angular velocity vector.


-SetControls(Handle h, table VehicleControls )

Sets the allowed controls of the handle. Below is the table format, you only need to include the entries you want to change.

VehicleControls { braccel=0, steer=0, pitch=0, strafe=0, jump=false, deploy=false, eject=false, abandon=false, fire=false }

The first 4 entries use decimal numbers, ranging from -1.0 to 1.0. The rest are false/true booleans. Setting these to 0/false essentially disables that control input.


-handle GetWhoShotMe ( handle h )

Returns who scored the most recent hit on the game object. Returns nil if none exists.


-float GetLastEnemyShot ( handle h )

Returns the last time an enemy shot the game object.


-float GetLastFriendShot ( handle h )

Returns the last time a friend shot the game object.


-DefaultAllies ()

Sets team alliances back to default.


-TeamplayAllies ()

Sets team alliances to Team Play mode. Team 1-5 are allied, and 6-10 are allied, respectively.


-Ally ( integer team1, integer team2 )

Makes the two teams allies of each other.

This function affects only the first Team number. So, Ally(1, 2), so 2 becomes friendly to 1, but 1 is still an enemy to 2.


-UnAlly ( integer team1, integer team2 )

Makes the two teams enemies of each other.

This function affects only the first Team number. So, Ally(1, 2), so 2 becomes friendly to 1, but 1 is still an enemy to 2.


-boolean IsTeamAllied ( integer team1, integer team2 )

Returns true if team1 considers team2 an ally. Returns false otherwise.

Due to the possibility of player-initiated "half-alliances", IsTeamAllied(team1, team2) might not return the same result as IsTeamAllied(team2, team1).


-boolean IsAlly ( handle me, handle him )

Returns true if game object "me" considers game object "him" an ally. Returns false otherwise.

Due to the possibility of player-initiated "half-alliances", IsAlly(me, him) might not return the same result as IsAlly(him, me).


-message AudioMessage ( string filename )

Plays the given audio file, which must be an uncompressed RIFF WAVE (.WAV) file.

Returns an audio message handle.


-IsAudioMessageDone ( message msg )

Returns true if the audio message has stopped. Returns false otherwise.


-StopAudioMessage ( message msg )

Stops the given audio message.


-PreloadAudioMessage( message msg )

Preloads the given audio message


-PurgeAudioMessage( message msg )

Purges the given audio message.


-PreloadMusicMessage( message msg )

Preloads the given audio message


-PurgeMusicMessage( message msg )

Purges the given audio message.


-LoadJukeFile( message msg )

Loads a juke file?


-SetMusicIntensity( number intensity )

Sets the music volume intensity?


-SetPathType ( string path, number Type )

Sets the named path to the desired type. 0 = One Way, 1 = Round Trip, 2 = Loop. 


-SetPathOneWay ( string path )

Changes the named path to one-way. Once a unit reaches the end of the path, it will stop.


-SetPathRoundTrip ( string path )

Changes the named path to round-trip. Once a unit reaches the end of the path, it will follow the path backwards to the start and begin again.


-SetPathLoop ( string path )

Changes the named path to looping. Once a unit reaches the end of the path, it will continue along to the start and begin again.


-SetIndependence ( handle me, integer independence)

Sets the independence of a unit. 1 (the default) lets the unit take initiative (e.g. attack nearby enemies), while 0 prevents that.


-boolean IsInfo ( string odfname )
-boolean IsInfo ( Handle h )

Returns true if the game object inspected by the info display matches the given odf name or handle.


-StartCockpitTimer ( integer time, [ integer warn ], [ integer alert ] )

Starts the cockpit timer counting down from the given time. If a warn time is given, the timer will turn yellow when it reaches that value. If an alert time is given, the timer will turn red when it reaches that value. All time values are in seconds.

The start time can be up to 35999, which will appear on-screen as 9:59:59. If the remaining time is an hour or less, the timer will show only minutes and seconds.


-StartCockpitTimerUp ( integer time, [ integer warn ], [ integer alert ] )

Starts the cockpit timer counting up from the given time. If a warn time is given, the timer will turn yellow when it reaches that value. If an alert time is given, the timer will turn red when it reaches that value. All time values are in seconds.

The on-screen timer will always show hours, minutes, and seconds The hours digit will malfunction after 10 hours.


-StopCockpitTimer ()

Stops the cockpit timer.


-HideCockpitTimer ()

Hides the cockpit timer.


-integer GetCockpitTimer ()

Returns the current time in seconds on the cockpit timer.


-StartEarthQuake ( number magnitude )

Starts a global earthquake effect.


-UpdateEarthQuake ( number magnitude )

Changes the magnitude of an existing earthquake effect.


-StopEarthQuake ()

Stops the global earthquake effect.


-boolean IsPerson ( handle h )

Returns true if the game object exists and is a person. Returns false otherwise.


-number GetCurWorld()

Returns the current world (0 (local), 1 (??), or 3(multi?)) Multiplayer has 3 different worlds it simulates.


-string GetVarItemStr( string varname )

Returns the string in the desired variable name, for instance: GetVarItemStr("network.session.svar6").


-number GetVarItemInt( string varname )

Returns the number in the desired variable name, for instance: GetVarItemStr("network.session.ivar6").


-number GetCVarItemInt( number Team, number index )

Returns the number in the desired team's Player's civar#, where # is the index specified.


-string GetCVarItemStr( number Team, number index )

Returns the string in the desired team's Player's csvar#, where # is the index specified.


-PreloadODF( string cfg)

Preloads the specified ODF.


-number TerrainFindFloor ( number x, number y )
-number TerrainFindFloor ( Matrix pos )
-number TerrainFindFloor ( Vector pos )
-number TerrainFindFloor ( string Path, [int Point = 0 ] )
-number TerrainFindFloor ( Handle h )

Returns the height of the terrain at the given position.


-number, vector GetFloorHeightAndNormal ( handle h )
-number, vector GetFloorHeightAndNormal ( string path [, integer point ] )
-number, vector GetFloorHeightAndNormal ( vector position )
-number, vector GetFloorHeightAndNormal ( matrix transform )

Returns the floor height and normal vector at the position of the handle, path, vector, or transform matrix.


-AddPilotByHandle ( handle h)

Adds a pilot to the given handle.


-PrintConsoleMessage ( string msg )

Prints a string to the in-game console.


-number GetRandomFloat ( number range )
-number GetRandomFloat ( number minrange , [ number maxrange ])

Gets a Random number generated by the game's random seed generator, between 0 and the specified range. (NOTE: If this is called, it must be called on all machines to ensure MP sync.)


-boolean IsDeployed ( handle h )

Returns true if the game object is a deployed craft. Returns false otherwise.


-Deploy ( handle h )

Tells the game object to deploy.


-boolean IsSelected ( handle h )

Returns true if the game object is selected. Returns false otherwise.
Weapon


-SetWeaponMask ( handle h, integer mask )

Sets what weapons the unit's AI process will use.

To calculate the mask value, add up the values of the weapon hardpoint slots you want to enable.

weaponHard1: 1 weaponHard2: 2 weaponHard3: 4 weaponHard4: 8 weaponHard5: 16


-GiveWeapon ( handle h, [ string weaponname ], [ integer slot ] )

Gives the game object the named weapon in the given slot. If no slot is given, it chooses a slot based on hardpoint type and weapon priority like a weapon powerup would. If the weapon name is empty, nil, or blank and a slot is given, it removes the weapon in that slot.

Returns true if it succeeded. Returns false otherwise.


-FireAt ( handle me, handle him, [ bool DoAim = false] )

Tells the game object to fire at the given target.


-bool IsFollowing (handle h) 

Returns true if the specified handle is following something?


-Handle WhoFollowing (Handle h) 

Returns the handle of the object the specified handle is following.


-SetUserTarget ( handle t)

Sets the local player's target.


-handle GetUserTarget ()

Returns the local player's target. Returns nil if it has none.


-handle GetUserTarget ( int Team)

Returns the team's player's target. Returns nil if it has none.


-SetPerceivedTeam ( handle h, teamnum t )

Set the game object's perceived team (as opposed to its real team).


-integer GetCurrentCommand ( handle me )

Returns the current command for the game object. Looking up the command number in the AiCommand table will convert it to a string. Looking up the command string in the AiCommand table will convert it back to a number.


-handle GetCurrentWho ( handle me )

Returns the target of the current command for the game object. Returns nil if it has none.


-EjectPilot ( handle h )

Commands the vehicle's pilot to eject.


-HopOut ( handle h )

Commands the vehicle's pilot to hop out.


-KillPilot ( handle h )

Kills the vehicle's pilot as if sniped.


-RemovePilot ( handle h )

Removes the vehicle's pilot cleanly.


-handle HoppedOutOf ( handle h )

Returns the vehicle that the pilot most recently hopped out of.


-Vector position, -Vector direction GetCameraPosition()

Returns the camera's current Position and Direction into the passed in variables.


-SetCameraPosition ( Vector pos, Vector dir )

Sets the camera position to the pos, facing the dir.


-ResetCameraPosition() 

Resets the Camera Position.


-number CalcCRC( string Name )

Returns the CRC of a string.


-IFace_Exec ( string filename )

Executes the specified CFG file. (Loading it)


-IFace_Activate (string Name )

Activates the CFG Element with the specified name.


-IFace_Deactivate (string Name )

Deactivates the CFG Element with the specified name.


-IFace_CreateCommand (string Name )

Creates a mission command? 


-IFace_CreateString ( string Name, string Value )

Creates a string with the desired value.


-IFace_SetString ( string Name, string Value )

Sets a string to the desired value.


-string IFace_GetString ( string Name )

Gets the value of a string? 


-IFace_CreateInteger ( string Name, int Value )

Creates an integer with the desired value.


-IFace_SetInteger ( string Name, int Value )

Sets the integer to the specified value.


-number IFace_GetInteger (string Name )

Gets the value of the specified integer.


-IFace_SetIntegerRange (string Name, interger Min, interger Max )

Sets the range of the specified integer to the min and max.


-IFace_CreateFloat ( string Name, float Value )

Creates a float with the specified value.


-IFace_SetFloat ( string Name, float Value )

Sets the float to the specified value.


-number IFace_GetFloat ( string Name )

Gets the value of the specified float.


-IFace_ClearListBox ( string Name )

Clears the specified listbox.


-IFace_AddTextItem ( string Name, string Value )

Adds a value to the specified ListBox.


-IFace_GetSelectedItem ( string Name, string Value )

Gets the value of the selected Listbox item.


-SetSkill ( Handle h, integer Skill )

Sets the skill level of the handle. Valid values are 0 - 3.


-SetAIP ( string aipname, [ integer team ] )

Switches the team's AI plan. It uses team 2 if no team number is given.


-LogFloat ( number value )

I have no idea, honestly. Probably some internal logging function you will never see. Honestly, it's just here for completion sake.


-number GetInstantMyForce()

Returns the Instant Action "My Force" setting.


-number GetInstantCompForce()

Returns the Instant Action "Computer Force" setting.


-number GetInstantDifficulty()

Returns the Instant Action "Difficulty" setting.


-number GetInstantGoal()

Returns the Instant Action "Goal" setting.


-number GetInstantType()

Returns the Instant Action "Type" setting.


-number GetInstantFlag()

Returns the Instant Action "Flag" setting.


-number GetInstantMySide()

Returns the Instant Action "MySide" setting.


-boolean CameraReady ()

Starts the cinematic camera and disables normal input.

Always returns true.


-boolean CameraPath ( string path, integer height, integer speed, handle target )

Moves a cinematic camera along a path at a given height and speed while looking at a target game object.

Returns true when the camera arrives at its destination. Returns false otherwise.


-boolean CameraPathDir ( string path, integer height, integer speed )

Moves a cinematic camera long a path at a given height and speed while looking along the path direction.

Returns true when the camera arrives at its destination. Returns false otherwise.


-boolean PanDone ()

Returns true when the camera arrives at its destination. Returns false otherwise.


-boolean CameraObject ( handle base, integer right, integer up, integer forward, handle target )
-boolean CameraObject ( handle base, Vector(up, right, forward), handle target )

Offsets a cinematic camera from a base game object while looking at a target game object. The right, up, and forward offets are in centimeters.

Returns true if the base or handle game object does not exist. Returns false otherwise.


-boolean CameraFinish ()

Finishes the cinematic camera and enables normal input.

Always returns true.


-boolean CameraCancelled ()

Returns true if the player canceled the cinematic. Returns false otherwise.


-boolean FreeCamera()

Activates the FreeCamera mode. Always returns true?


-boolean FreeFinish() 

Deactivates the FreeCamera mode. Always returns true?


-boolean PlayMovie ( string Name[20] )

Plays a movie of the specified name, limited to 20 characters max.


-boolean StopMovie ( )

Stops the currently playing movie.


-boolean PlayMove ( )

Plays a move? ????


-boolean PlayRecording ( string Name[20] )

Plays a recorded movie of the specified name, limited to 20 characters max.


-boolean PlayRecording ( string Name[20], boolean UpdateCamera )

Plays a recorded movie of the specified name, limited to 20 characters max.


-boolean PlaybackVehicle ( string Name[20] )

Plays a recorded movie of the specified name, from the specified vehicle? No idea really... limited to 20 characters max.


- int SetAnimation (Handle h, string Name, [int AnimationType = 0] )

Sets the animation of the handle to the specified animation name. 
(animType: 0 == loop, 1 == 2way) Returns the max frames of the animation.


-int GetAnimationFrame ( Handle h, string Name )

Returns the current animation frame of the specified animation.


-StartAnimation ( Handle h )

Starts the last specified animation on the handle.


-MaskEmitter ( Handle h, number Mask )

Sets the emitter mask for the handle.


-StartEmitter ( Handle h, int Slot )

Starts the emitter of the specified slot.


-StopEmitter ( Handle h, int slot )

Stops the emitter of the specified slot.


-SetObjectiveOn ( handle h )

Sets the game object as an objective to all teams.


-SetObjectiveOff ( handle h )

Sets the game object back to normal.


-string GetObjectiveName ( handle h )

Gets the game object's visible name.


-SetObjectiveName ( handle h, string name )

Sets the game object's visible name.


-ClearObjectives ()

Clears all objective messages.


-AddObjective ( string filename, [ string color ], [ number duration ] )

Adds an objective message from the given file (usually an .otf).

The message defaults to white if no color is given. The color may be "black", "dkgrey", "grey", "white", "blue", "dkblue", "green", "dkgreen", "yellow", "dkyellow", "red", or "dkred"; the value is case-insensitive.

The message lasts 8 seconds if no duration is given.


-boolean IsWithin ( handle h1, handle h2, number dist )

Returns true if the units are closer than the given distance of each other. Returns false otherwise.

(This function is equivalent to GetDistance (h1, h2) < d)


-integer CountUnitsNearObject ( handle h, number dist, integer team, string odfname )

Returns how many objects with the given team and odf name are closer than the given distance.


-SetAvoidType ( Handle h, int AvoidType )

Sets the Avoid Type of a unit. 0 = None, ignore collisions, 1 = force; use force-based avoidance, 2 = plan; use plan-based avoidance.


-Annoy ( Handle me, Handle him )

Makes him think that me shot it.


-ClearThrust ( Handle h )

Clears the thrust of a unit.


- SetVerbose ( Handle h, bool verbose )

Makes a unit talkatve,


-ClearIdleAnims ( Handle h )

Clears idle anims?


-AddIdleAnim ( Handle h, string Name )

Adds the named animation as the units Idle Animation?


-boolean IsIdle ( Handle h )

Returns true if the unit is idle.


-integer here, integer coming CountThreats ( Handle h )

Counts the enemy units within 200m of a h as here, and all enemy units on map as coming.


-SpawnBirds ( int group, int count, string ODF, int Team, string Path )

Spawns birds of the specified location on the team that go along the path?


-SpawnBirds ( int group, int count, string ODF, int Team, Handle startObj, handle destObj )

Spawns birds of the specified location on the team at the start object and they go to the dest object?


-RemoveBirds ( int group )

Removes the specified bird group.


-SetColorFade (float ratio, float rate, unsigned long Color )

Sets a color fade, at the ratio, rate of dispersal, and color.


-CalcCliffs ( Handle h1, Handle h2, float radius )

Calculates the cliffs around the handles?


-CalcCliffs ( string Path )

Calculates the cliffs along a path?


-integer StartSoundEffect ( string file, Handle h )

Starts a sound effect at the specified handle.


-integer FindSoundEffect ( string file, Handle h )

Finds a sound effect at the specified handle.


-StopSoundEffect ( integer sound )

Stops the specified sound effect.


-Handle GetObjectByTeamSlot( int Team, int Slot )

Returns the handle of the given TeamSlot. 
DLL_TEAM_SLOT_RECYCLER = 1;
DLL_TEAM_SLOT_FACTORY = 2;
DLL_TEAM_SLOT_ARMORY = 3;
DLL_TEAM_SLOT_TRAINING = 4;
DLL_TEAM_SLOT_BOMBERBAY = 5;
DLL_TEAM_SLOT_SERVICE = 6;
DLL_TEAM_SLOT_TECHCENTER = 7;
DLL_TEAM_SLOT_COMMTOWER = 8;
DLL_TEAM_SLOT_BASE4 = 9; // Whatever's in base slot #4 (only w/ mods)
DLL_TEAM_SLOT_BASE5 = 10; // see above
DLL_TEAM_SLOT_BASE6 = 11; // see above
DLL_TEAM_SLOT_BASE7 = 12; // see above
DLL_TEAM_SLOT_BASE8 = 13; // see above
DLL_TEAM_SLOT_BASE9 = 14; // see above


-boolean IsNetGame ()
-boolean IsNetworkOn ()

Returns true if the game is a network game. Returns false otherwise.


-boolean IsHosting ()
-boolean ImServer()

Returns true if the local machine is hosting a network game. Returns false otherwise.


-boolean ImDedicatedServer() 

Returns true if a dedicated server.


-boolean IsTeamplayOn()

Returns true if TeamPlay is on.


-integer CountPlayers() 

Returns the number of players currently in the game.


-integer GetCommanderTeam ( int Team )

In TeamPlay, returns the commander's Team, in non TeamPlay, returns the team.


-integer GetFirstAlliedTeam (int Team )
-integer GetLastAlliedTeam (int Team )

Returns the ranges (inclusive) of team #s allied with a specified team.  

Note: these teams may have no players on them; check if GetPlayerHandle(x) returns anything to see if the team # is actually in use.


-integer DefensiveTeam, -integer OffensiveMinTeamNum, -integer OffensiveMaxTeamNum GetTeamplayRanges ( int WhichTeam )

Alternat to above -- qeries the game for the teamplay team # ranges based on which team-group (0,1) is asked.


-SetRandomHeadingAngle ( Handle h )

Random heading on a craft (2D only)


-ClearTeamColors( )

Clears the TeamColors. 


-DefaultTeamColors ( )

Sets the default team colors.


-TeamplayTeamColors ( )

Sets the TeamPlay colors.


-SetTeamColor ( int Team, int Red, int Green, int Blue )
-SetTeamColor ( int Team, Vector(red, green, blue) )
//-SetTeamColor ( int Team, DWORD Color ) // Not sure if this is supported in Lua.

Sets a specific team's color.


-ClearTeamColor ( int Team )

Clears a specific team's color.


-MakeInert ( Handle h )

Sets the specified craft to be invisible, uncollidable, w/o weapons, etc. Used for a dedicated server's fake-vehicle.


-vector GetPositionNear ( vector center, [ number minradius ], [ number maxradius ] )
-vector GetPositionNear ( Handle h, [ number minradius ], [ number maxradius ] )
-vector GetPositionNear ( Matrix center, [ number minradius ], [ number maxradius ] )
-vector GetPositionNear ( string Path, [ int Point = 0] , [ number minradius ], [ number maxradius ] )

Returns a ground position in a ring around the center between minradius and maxradius with roughly the same terrain height as the terrain height at the center.

This is good for scattering spawn positions around a point while excluding positions that are too high or too low.

If no radius is given, it uses the default radius of zero.


-string GetPlayerODF( int Team, [int RandomizeType = 0] )

Returns the next Player ODF, RandomizeType is 0 = None, 1 = Race, 2 = Any.


-Handle BuildEmptyCraftNear ( Handle h, string ODF, int Team, float MinRadiusAway, float MaxRadiusAway )

Builds an empty ship near the specified handle, on the team, between the min and max radius.


-Vector NewPos GetCircularPos( Vector CenterPos, float Radius, float Angle)

Gets a new position around a central point. The y-posn is the terrain at that location.


-vector GetCircularPos ( vector center, [ number radius ], [ number angle ] )

Returns a ground position offset from the center by the radius in a direction controlled by the angle.

If no radius is given, it uses a default radius of zero.

If no angle is given, it uses a default angle of zero.

An angle of zero is +X (due east), pi * 0.5 is +Z (due north), pi is -X (due west), and pi * 1.5 is -Z (due south).


-Vector GetSafestSpawnpoint ( )

Returns a spawnpoint with no players within 450m.


-Vector GetSpawnpoint ( int Team )

Returns the first spawnpoint found with the specified team. returns randomsafest if none are found on team.


-Handle GetSpawnpointHandle ( int Team )

Returns the handle of the first spawnpoint found with the specified team number.


-Vector GetRandomSpawnpoint ( [int Team = -1] )

Returns a random spawnpoint that "looks" safe (nobody within 100m)


-SetTimerBox ( string msg )

Sets the timer box to the specified message.


-AddToMessagesBox ( string msg, [ string Color ] )
-AddToMessagesBox ( string msg, [ number Color ] )

Adds a message to the message box, can be used with the Make_RGB to create a custom color. Specific pre-set Colors are recognized.


- int GetDeaths ( Handle h )

Returns the Deaths count of the Player who owns the handle.


- int GetKills ( Handle h )

Returns the Kills count of the player who owns the handle.


- int GetScore ( Handle h )

Returns the Score of the player who owns the handle.


-SetDeaths ( Handle h, int Value )

Sets the handle's owner's Deaths to the value.


-SetKills ( Handle h, int Value )

Sets the handle's owner's Kills to the value.


-SetScore ( Handle h, int Value )

Sets the handle's owner's Score to the value.


-AddDeaths ( Handle h, int Value )

Adds the value to the handle's owner's Deaths.


-AddKills ( Handle h, int Value )

Adds the value to the handle's owner's Kills.


-AddScore ( Handle h, int Value )

Adds the value to the handle's owner's Score.


-SetAsUser( Handle h, int Team )

Sets the player on the specified team as the specified handle. (Puts the player in the ship)


-SetNoScrapFlagByHandle ( Handle h )

Sets the handle to not drop scrap.


-ClearNoScrapFlagByHandle ( Handle h )

Clears the "no scrap" flag, restoring scrap droppyness.


-int GetLocalPlayerTeamNumber ( ) 

Returns the team number of the local user.


-DPID GetLocalPlayerDPIP ( )

Returns the DPIP of the local user. 


-FlagSteal ( Handle flag, Handle holder )

Sets the Flag to be stolen by the holder?


-FlagRecover ( Handle flag, Handle holder )

Sets the flag as recovered by the holder?


-FlagScore ( Handle flag, Handle holder )

Sets the flag as scored by the holder?


-MoneyScore ( int Amount, Handle bagman )

Sets the bagman as having scored the bag for x amount.


-NoteGameoverByTimeLimit ( )

Ends the game shortly with a message broadcast saying the time limit expired.


-NoteGameoverByKillLimit ( Handle h )

Ends the game shortly with a message saying the owner of the handle won by kill limit.


-NotegameoverByScore ( Handle h )

Ends the game shortly with a message saying the owner of the handle won by Score limit.


-NoteGameoverByLastWithBase ( Handle h )

Ends the game shortly with a message saying the owner of the handle won by destroying all other bases.


-NoteGameoverByLastTeamWithBase (int Teamgroup )

Ends the game shortly with a message saying that Team group # won by destroying all other bases.


-NoteGameoverByNoBases ( )

Ends the game shortly with a message saying no one has any bases.


-DoGameover ( float seconds )

Calls for the game to end after x seconds. 


-SetMPTeamRace ( int TeamGroup, char Race )

Sets the TeamGroup to the specified race.


-handle GetTarget ( handle h )

Returns the game object's target. Returns nil if it has none.


-IFace_ConsoleCmd ( string msh, [ bool squelchoutput = true] )

Inputs a command as if the user had typed it into the console.


-Network_SetString ( string Name, string value )

Sets a network string, propegates the command to clients for i/s vars.


-Network_SetIteger ( string name, int value )

Sets a network ineteger, propegates the command to clients for i/s vars.


-vector GetVelocity ( handle h )

Returns the game object's linear velocity vector. Returns nil if none exists.


-string GetCfg ( handle h )

Returns the cfg name of the game object. Returns nil if none exists.


-string GetOdf ( handle h )

Returns the .odf name of the game object. Returns nil if none exists.


-string GetBase ( handle h )

Returns the base name of the game object. Returns nil if none exists.


-string GetClassSig ( handle h )

Returns the class ID of the game object. 

Class ID List:
// 	"CLASS_ID_NONE",	// undefined object (default)
// 	"CLASS_ID_CRAFT",	// hovering vehicle
// 	"CLASS_ID_VEHICLE",	// tracked vehicle
// 	"CLASS_ID_TORPEDO",	// miniature vehicle
// 	"CLASS_ID_POWERUP",	// power up pod
// 	"CLASS_ID_PERSON",	// pilot or soldier
// 	"CLASS_ID_ANIMAL",	// animal
// 	"CLASS_ID_STRUCT",	// generic building
// 	"CLASS_ID_BUILDING",	// important building
// 	"CLASS_ID_SIGN",	// mine object
// 	"CLASS_ID_SCRAP",	// scrap piece
// 	"CLASS_ID_DEPOSIT",	// scrap deposit
// 	"CLASS_ID_BEACON",	// nav beacon
// 	"CLASS_ID_PLANT",	// plant object
// 	"CLASS_ID_TERRAIN",	// terrain object
// 	"CLASS_ID_WEAPON",	// weapon object
// 	"CLASS_ID_ORDNANCE",	// ordnance object
// 	"CLASS_ID_EXPLOSION",	// explosion object
// 	"CLASS_ID_CHUNK",	// chunk object
// 	"CLASS_ID_CRASH",	// crash object
// 	"CLASS_ID_COLLAPSE",	// collapsing object
Returns nil if none exists. Not all types can be seen through this function.


-string GetClassLabel ( handle h )

Returns the class label of the game object (e.g. "wingman"). Returns nil if none exists.


-string GetWeaponConfig ( Handle h, [int Slot = 0] )

Returns the config of the weapon in the specified slot. (0 - 4)


-string GetWeaponODF( Handle h, [int Slot = 0] )

Returns the odf of the weapon in the specified slot. (0 - 4)


-string GetWeaponGOClass( Handle h, [int Slot = 0] )

Returns the classlabel of the weapon in the specified slot. (0 - 4)


-boolean DoesODFExist ( string Odf )

Returns true if the specified ODF exists, e.g. DoesODFExist("avtank")

-TranslateString ( name Value, int Size, string source ) 

Translates a string from Localize.odf, e.g. TranslateString(tempstr, sizeof(tempstr), "MissionS0503");


-integer GetScavengerCurScrap ( Handle h )

Returns the current scrap inside the specified handle, if it is a scavenger. Returns -1 if the handle is not a Scavenger.


-integer GetScavengerMaxScrap( Handle h )

Returns the max scrap storage of the specified handle, if it is a scavenger. Returns -1 if the handle is not a Scavenger.


-SetScavengerCurScrap ( Handle h, int Scrap )

Sets the current scrap storage of the scavenger to the specified amount. Values <0 or > a scav's max scrap are clamped.


-SetScavengerMaxScrap( Handle h, int Scrap )

Sets the current scrap storage of the scavenger to the specified amount. Values < 0 or > 1000 are clamped


-SelfDamage ( Handle h, number Amount )

Like Damage, but sets the cause of the damage to themselves, 


-WantBotKillMessages ( ) 

Enables BZ2 1.2 Style PlayerEjected messages for all units, not just local/remote players.


-EnableHighTPS ( number NewRate )

Sets everyone to the same TPS rate as the server, and fills NewRate with the current TPS rate.


-Handle GetLocalUserInspectHandle ( ) 

Returns the handle the user is currently inspecting. WARNING: NOT MP Safe.


-Handle GetLocalUserSelectHandle ( )

Returns the handle the user currently as selected. WARNING: NOT MP Safe.


-ResetTeamSlot ( Handle h )

Resets the handle's teamslot to refresh it.


-integer GetCategoryTypeOverride ( Handle h )

Returns the ODF Paramter CategoryTypeOverride, if specified in the ODF. Returns -2 if h doesn't point to a gameobject.


-integer GetCategoryType ( Handle h )

Returns the categorytype of the handle. Returns -2 if h doesn't point to a gameobject.


-integer, boolean GetODFHexInt ( odfhandle odf, string section, string label, [ integer default ] )

Reads an integer value from the named label in the named section of the ODF file.

If no value is found, it uses the default value. If no default value is given, the default value is 0.

Returns the value and whether the value was found.


-integer, boolean GetODFInt ( odfhandle odf, string section, string label, [ integer default ] )

Reads an integer value from the named label in the named section of the ODF file.

If no value is found, it uses the default value. If no default value is given, the default value is 0.

Returns the value and whether the value was found.


-integer, boolean GetODFLong ( odfhandle odf, string section, string label, [ integer default ] )

Reads an integer value from the named label in the named section of the ODF file.

If no value is found, it uses the default value. If no default value is given, the default value is 0.

Returns the value and whether the value was found.


-number, boolean GetODFFloat ( odfhandle odf, string section, string label, [ number default ] )

Reads a floating-point value from the named label in the named section of the ODF file.section.

If no value is found, it uses the default value. If no default value is given, the default value is 0.0.

Returns the value and whether the value was found.


-number, boolean GetODFDouble ( odfhandle odf, string section, string label, [ number default ] )

Reads a floating-point value from the named label in the named section of the ODF file.

If no value is found, it uses the default value. If no default value is given, the default value is 0.0.

Returns the value and whether the value was found.


-string, boolean GetODFChar ( odfhandle odf, string section, string label, [ string default ] )

Reads a string value from the named label in the named section of the ODF file.

If a value is not found, it uses the default value. If no default value is given, the default value is nil.

Returns the value and whether the value was found.


-boolean, boolean GetODFBool ( odfhandle odf, string section, string label, [ boolean default ] )

Reads a boolean value from the named label in the named section of the ODF file.

It considers values starting with 'Y', 'y', 'T', 't', or '1' to be true and value starting with 'N', 'n', 'F', 'f', or '0' to be false. Other values are considered undefined.

If a value is not found or is undefined, it uses the default value. If no default value is given, the default value is false.

Returns the value and whether the value was found.


-string, boolean GetODFString ( odfhandle odf, string section, string label, [ string default ] )

Reads a string value from the named label in the named section of the ODF file.

If a value is not found, it uses the default value. If no default value is given, the default value is nil.

Returns the value and whether the value was found.


-integer, boolean GetODFColor ( odfhandle odf, string section, string label, [ integer default ] )

Reads an integer value from the named label in the named section of the ODF file.

If no value is found, it uses the default value. If no default value is given, the default value is 0.

Returns the value and whether the value was found.


-integer, boolean GetODFVector ( odfhandle odf, string section, Vector label, [ integer default ] )

Reads a Vector value from the named label in the named section of the ODF file.

If no value is found, it uses the default value. If no default value is given, the default value is a Vector of 0, 0, 0.

Returns the value and whether the value was found.


-NoteGameoverWithCustomMessage ( string msg )

Ends the game shortly, with the custom msg printed as the reason.


-integer SetBestGroup ( Handle h)

Sets the handle to the best fit group. Returns the group #, same as GetFirstEmptyGroup does, or -1 if any problems.


-GetGroup ( int Team, int Group, int ObjectType, string Results )

Returns the type string category info of the specified group.

//	Get_CFG, // Returns the GameObjectClass's cfg string
//	Get_ODF, // Returns the ODF of the object
//	Get_GOClass_gCfg, // Returns the GameObjectClass's gCfg string (basename)
If any of the params is invalid, or there's nothing in that gruop, pBuffer is set to an empty string. Note: AI teams ignore groups, so don't trust the results.


-integer GetGroup ( Handle h )

Parallels SetGroup(), returns which Group the unit is currently in, [0 .. 9]   If an invalid handle is passed in, will return -1. 
// Note: AI-only teams have much looser group restrictions,
// and values might be outside of the expected range. Use this on human-
// controlled teams only.


-integer GetGroupCount ( int Team, int Group )

Returns the number of units in the specified group.


-SetLifespan ( Handle h, float Timeout )

Sets the life span of the handle to the specified number of seconds.


-boolean DoesFileExist ( string filename )

Returns true if the specified file exists in the assets. Note: This requires a file extension.


-boolean LoadFile ( string Filename, string buffer, int Size )

Loads a file into the specified buffer. Note: this is designed to load text files, loading a binary file will result in a string of binary data.


-integer StartAudio3D ( string name, Handle h, int AudioCategory, [ bool Loop = false ], [ bool StopLast = false ] )

AudioCategories:
//	AUDIO_CAT_UNKNOWN = 0,
//	AUDIO_CAT_UNIT_DLG = 1,
//	AUDIO_CAT_MISSION_DLG = 2,
//	AUDIO_CAT_INTERFACE = 3,
//	AUDIO_CAT_WEAPON = 4,
//	AUDIO_CAT_ORDNANCE = 5,
//	AUDIO_CAT_EXPLOSION = 6,
//	AUDIO_CAT_ENGINE = 7,
//	AUDIO_CAT_AMBIENT = 8,
//	AUDIO_CAT_MUSIC = 9,

Starts an Audio message at the specified handle, with the specified audio category. If loop is true, it loops, if StopLast is true, it stops any of the name'ed sound file that's currently playing.


-integer StartAudio3D ( string name, float x, float y, float z, int AudioCategory, [ bool Loop = false ] )
-integer StartAudio3D ( string name, Vector pos, int AudioCategory, [ bool Loop = false ] )
-integer StartAudio3D ( string name, Matrix mat, int AudioCategory, [ bool Loop = false ] )

Same as above, but takes an X Y Z, Vector, or Matrix position. 


-integer StartAudio2D ( string name, float Volume, float Pan, float Rate, [ bool Loop = false], [ bool IsMusic = false ] )

Starts a 2d Audio message, at the specified volume, pan and rate. e.g. musicHandle = StartAudio2D("music1.wav", 1.0f, 0.0f, 44100.0f, false, true)


-boolean IsAudioPlaying ( int AudioHandle ) 

Returns true if the specified audio handle is playing.


-StopAudio ( int AudioHandle )

Stops the specified audio handle.


-PauseAudio ( int AudioHandle )

Pauses the specified audio handle.


-ResumeAudio ( int AudioHandle )

Resumes the specified audio handle.


-SetVolume ( int AudioHandle, float Vol, [ bool AdjustByVolumes = true ] )

Sets the volume of the specified handle. Valid values are 0.0 .. 1.0f. This value will be scaled by the user's preferences if adjustByVolumes is true


-SetPan ( int AudioHandle, float Pan )

Sets the pan. Valid values are -1.0f .. 1.0f. Valid only for 2D sounds.


-SetRate ( int AudioHandle, float Rate )

Sets the rate. Valid values are 0.0f .. 44100.0f.


-float GetAudioFileDuration ( int AudioHandle )

Returns length (in seconds) of this file. Returns 0 if not playing.


-boolean IsPlayingLooped ( int AudioHandle ) 

Returns true if the specified audio handle is being played in looped mode.


-Handle GetNearestPowerup ( Handle h, bool ignorespawnpoints, [ float maxDist = 450.0f ] )

Returns the nearest powerup to the handle. options to filter objects and range.


-Handle GetNearestPerson ( Handle h, bool skipfriendlies, [ float maxDist = 450.0f ] )

Returns the nearest powerup to the handle. options to filter objects and range.


-SetCommand ( handle me, integer command, integer priority, handle who, matrix where, [ string param ] )
-SetCommand ( handle me, integer command, integer priority, handle who, vector where,  [ string param ] )
-SetCommand ( handle me, integer command, [ integer priority ], [ handle who ], [ string path ], [ string param ] )

Commands the unit using the give parameters. Be careful with this since not all commands work with all units and some have strict requirements on their parameters.

"Command" is the command to issue, normally chosen from the global AiCommand table (e.g. AiCommand.GO). "Priority" is the command priority; a value of 0 leaves the unit commandable while the default value of 1 makes it uncommandable. "Who" is the optional target game object. "Path" is the optional name of a path to follow. "When" is an optional absolute time value only used by command AiCommand.STAGE. Param is an optional odf name only used by command AiCommand.BUILD.


-SetGravity ( [ float gravity = 12.5 ] )

Sets the gravity of the world to the specified float.


-SetAutoGroupUnits ( [ bool AutoGroup = true ] )

Sets whether objects made with BuildObject() are automatically slotted into the 'best' group (with SetBestGroup()). Also, if this is true at turn 5, all units preplaced on the map will get SetBestGroup() called on them if not already set.


-KickPlayer ( Handle h, string Explination, [ bool BanAslo = false] )

Kicks a player out of the current session, with an optional "explanation", and/or ban ability. Note: bans are by IP, but if multiple people are connecting from behind one IP, a ban will get them all. Use caution if banning.


-boolean TerrainIsWater ( Vector pos )
-boolean TerrainIsWater ( float x, flaot z )
-boolean TerrainIsWater ( Matrix pos )
-boolean TerrainIsWater ( string Path, [int Point = 0 ] )
-boolean TerrainIsWater ( Handle h )

Returns true when the terrain system believes the cell type is water. This is a very quick test, checking the 8x8 meter grid cell this point is in, to see whether it's got water. Use TerrainGetHeightAndNormal() if you want a finer-grained, but slower test.


-number, vector GetTerrainHeightAndNormal ( handle h [ bool UseWater = false ] )
-number, vector GetTerrainHeightAndNormal ( string path [, integer point ], [ bool UseWater = false ]  )
-number, vector GetTerrainHeightAndNormal ( vector position, [ bool UseWater = false ]  )
-number, vector GetTerrainHeightAndNormal ( matrix transform, [ bool UseWater = false ]  )

Returns the terrain height and normal vector at the position of the transform matrix. UseWater is a flag to use WaterHeight or not, if the position is on water.


-boolean WriteToFile ( string filename, string content, [ bool append = true ] )

Writes a string to the specified file name. If append is true, it adds to the contents, if false it erases the contents before writing. Returns true if successful, false if otherwise.
The file is stored either in My Documents/My Games/Battlezone II - BZC/ or in Battlezone II root folder. Can be used to make custom log files, saved score settings, etc. You can add existing paths to it, by telling it a filename like "BZCaddon/blah.txt"


-table GetPathPoints ( string Path )

Returns sets of x and z point coordinates for each point in the path.


-handle GetOwner ( handle h )

Returns the game object's owner. Returns nil if it has none.


-SetTarget ( handle h, handle t )

Sets the game object's target.


-SetOwner ( handle h, handle o )

Sets the game object's owner.


-SetPilotClass ( handle h, string odfname )

Sets the vehicle's pilot class to the given odf name. This does nothing useful for non-vehicle game objects. An odf name of nil resets the vehicle to the default assignment based on nation.


-AllowRandomTracks ( [ bool allow = true ] )

If the user chose to have allow music tracks while playing, then this function allows them. This function must be called in Start() for it to take effect.


-SetFFATeamColors ( int TeamColorType )
-SetTeamStratColors ( inr TeamColorType )

Sets the team color settings for each mode.

TeamColorTypes:
//	TEAMCOLOR_TYPE_DEFAULT = 0, // Defaults
//	TEAMCOLOR_TYPE_GAMEPREFS = 1, // What's set in gameprefs
//	TEAMCOLOR_TYPE_SERVER = 2, // What the server sent us.
//	TEAMCOLOR_TYPE_CURRENT = 3, // Valid only to GetFFATeamColor().


-integer, integer, integer, GetFFATeamColor ( int TeamColorType, int Team ) 
-Vector GetFFATeamColorVector ( int TeamColorType, int Team ) 

Returns the current TeamColors for the specified Team as r, g, b. 


-integer, integer, integer, GetTeamStratColor ( int TeamColorType, int Team )
-Vector GetTeamStratColorVector ( int TeamColorType, int Team )

Returns the current TeamColors for the specified team. the team parameter must be 0 (first teamgroup) or 1 (second teamgroup).


-SwapTeamStratColors ( )

Switches the team strat's team colors.


-boolean GetTeamColorsAreFFA ( )

Returns true if the colors are FFA, returns false if TeamStrat.


-SetTeamColors ( int TeamColorType )

Sets the TeamColorType to the specified setting. 


-integer AddPower ( integer team, integer count )

Adds to the team's Power count, clamped between zero and maximum count.

Returns the new Power count.


-integer SetPower ( integer team, integer count )

Sets the team's Power count, clamped between zero and maximum count.


-Returns the new Power count.

integer GetPower ( integer team )

Returns the team's Power count.


-integer AddMaxPower ( integer team, integer count )

Adds to the team's maximum Power count.

Returns the new maximum Power count.


-integer SetMaxPower ( integer team, integer count )

Sets the team's maximum Power count.

Returns the new maximum Power count.


-integer GetMaxPower ( integer team )

Returns the team's maximum Power count.


-integer, integer, integer, GetTeamStratIndividualColor ( int TeamColorType, int Team )
-Vector GetTeamStratIndividualColorVector ( int TeamColorType, int Team )

Returns an individual team's color in a TeamStrat game as r, g, b.


-string GetMapTRNFilename ()

Returns the name of the TRN file for the map. This can be used with GetOdf*() functions to read values from the TRN file.


-boolean IsNotDeadAndPilot2 ( Handle h )

Like IsAliveAndPilot2, but differs subtly. The IsAlive* functions will return false if the 'destroyed' flag is set on the object -- i.e. health < 0. But, there's sometimes a slight delay between when destroyed = true, and the end of the death sequence (explosion, etc), which is when DLL::ObjectKilled() is called. Thus, IsNotDeadAndPilot2() will return true as long as the object hasn't fully been killed yet.


-string GetLabel ( handle h )

Returns the label of the game object (e.g. "unnamed_avtank"). Returns nil if none exists.


-SetLabel ( Handle h, string label ) 

Sets the label string of a handle.


-Handle GetTap ( Handle h, int Index )

Returns the handle of h's tap of the specified index.


-SetTap ( Handle me, int Index, Handle him )

Sets the handle him to the tap index of handle me.


-float GetCurLocalAmmo ( Handle h, int Slot ) 

Returns the current LocalAmmo of the specified weapon slot.


-AddCurLocalAmmo ( Handle h, float value, int Slot ) 

Adds the value to the LocalAmmo of the specified weapon slot.


-float GetMaxLocalAmmo ( Handle h, int Slot ) 

Returns the Max LocalAmmo ratio of the specified weapon slot.


-SetCurLocalAmmo ( Handle h, float value, int Slot )

Sets the current LocalAmmo to the specified amount for the specified weapon slot.


-string GetNetworkListItem ( integer NetworkListType, integer item )

Returns the entry of the specified NetoworkListType item.

NetworkListTypes:
//	NETLIST_MPVehicles,		// item must be [0..31]
//	NETLIST_StratStarting,	// item must be [0..31]
	// For subsequent entries, the 'item' parameter varies by size of 	list. See GetNetworkListCount() below for how to get the list size.

//	NETLIST_Recyclers,
//	NETLIST_AIPs,
//	NETLIST_Animals,
//	NETLIST_STCTFGoals,
//	NETLIST_IAHumanRecyList,
//	NETLIST_IACPURecyclers,
//	NETLIST_IAAIPs,


-integer GetNetworkListCount ( integer NetworkListType )

Returns the size of the specified list.


-integer GetTeamRelationship ( Handle h1, Handle h2 )

Returns the TeamRelationship of the h1 > h2. 

TeamRelationships:
//	TEAMRELATIONSHIP_INVALIDHANDLE, // One or both handles is invalid
//	TEAMRELATIONSHIP_SAMETEAM, // Team # for both items is the same
//	TEAMRELATIONSHIP_ALLIEDTEAM, // Team # isn't identical, but teams are allied
	TEAMRELATIONSHIP_ENEMYTEAM, // Team # isn't identical, and teams are enemies


-boolean HasPilot ( Handle h )

Returns true if the handle has a pilot. Returns false if not, or if h is something that can't have a pilot.


-string GetPilotClass ( handle h )

Returns the odf name of the vehicle's pilot class. Returns nil if none exists.


-integer GetBaseScrapCost ( Handle h ) 

Returns the unmodified scrapcost of the handle.


-integer GetActualScrapCost ( Handle h )

Returns the actual scrap cost. For now only returns BaseScrapCost.


-PetWatchdogThread ( )

Stops the WatchDogThread from triggering and ending the game within the next 5 seconds.


-GetPerceivedTeam ( handle h, teamnum t )

Returns the game object's perceived team number (as opposed to its real team).

The perceived team will differ from the real team when a player enters an empty enemy vehicle without being seen until they attack something.

Units on the game object's perceived team will treat it as friendly until it "blows its cover" by attacking, at which point it will revert to its real team.

Units on the game object's real team will treat it as friendly regardless of its perceived team.


-SetLastCurrentPosition ( Handle h, Matrix LastPos, [ Matrix CurPos ] )

For DLLs that are trying to get full control of an object's position, this allows the last and current orientation & positions to be set simultaneously. The caller should take care to set lastMatrix to what was passed in as the curMatrix last frame, or jittering can occur. Note: repeatedly calling this on tracked vehicles is likely to make the physics system unhappy.

CurPos is optional, it will use the objects current position if not specified.


-float GetRemainingLifeSpan ( Handle h )

Parallel to SetLifespan, a query function to read it back. Returns a floating point value in this pattern:
//	value <  0 : invalid handle passed in
//	value == 0 : infinite lifespan
//	value >  0 : number of seconds of lifespan remaining


-integer count,  table array GetAllSpawnpoints ( [ integer Team = 0 ] )

This function fills array, one table with 7 entries per spawn point that is on the map. Returns the number of tables in the array as count.

SpawnPointTable:
//	Vector	m_Position;
//	int		m_Team;
//	Handle	m_Handle;

	// Distances will be a "huge number" (1.0e30f) if nothing can be
	// found in that category. Otherwise, it's the distance (in
	// meters) in the XZ (horizontal) plane

	// Distance to closest item on team 0 (including scrap pools, etc)
//	float	m_DistanceToClosestTeamZero;
	// The following are valid only if spawnpoint has a team set, or
	// finding spawnpoints relative to a team
//	float	m_DistanceToClosestSameTeam;
//	float	m_DistanceToClosestAlly;
//	float	m_DistanceToClosestEnemy;



-float GetRemainingLifeSpan ( Handle h )

Parallel to SetLifespan, a query function to read it back. Returns a floating point value in this pattern:
//	value <  0 : invalid handle passed in
//	value == 0 : infinite lifespan
//	value >  0 : number of seconds of lifespan remaining


-string GetPlan ( int team )
-string GetAIP ( [ integer team ] )

Returns the current AIP for the specified team.


-integer GetSkill ( Handle h )

Parallels SetSkill(), a get function. See comments on SetSkill() for the return value. Returns -1 if not a valid handle.


-integer GetIndependence( handle me )

Gets the independence of a unit.


-string GetObjectiveName ( Handle h)

Parallels SetObjectiveName(), Gets the game object's visible name.


-integer GetWeaponMask ( Handle h )

Parallels SetWeaponMask(), returns the current unit's weapon mask. Note that if an invalid handle is passed in, will return 0.


-SetInterpolablePosition ( Handle h, [ Matrix* pLastMat = NULL ] , [ Matrix* pTrueMat = NULL ] , [ bool bSetPosition = true ] );
-SetInterpolablePosition ( Handle h, [ Vector* pLastPos = NULL ] , [ Vector* pTruePos = NULL ] );

Allows DLLs to directly set the Last and/or True positions for an object, directly. 
// Note: if you pass NULL for a parameter, it will leave that
// untouched
// Note: the Matrix variant will use all 4 rows of the passed-in
// matrix, which includes the position if bSetPosition==true. If
// bSetPosition== false, will only use the 3x3 rotation components of
// the passed-in matrix
//
// BZ2 will interpolate each turn (1.0 seconds divided by MWF) every
// object's position/orientation from the last position to true
// position. For smoother onscreen movement, an entity's true position
// should be passed in as the last position the next turn.


- integer SecondsToTurns( float timeSeconds )
- float TurnsToSeconds( int turns )

// Helpful time conversion functions -- convert turns to seconds, and
// vice versa. These are MWF aware -- e.g. if MWF=10, 1 second = 10
// turns; if MWF=20, 1 second = 20 turns.


-integer GetLifeSpan ( Handle h )

Parallels SetLifespan(), see comments above it. Returns the # of seconds for an object to live. This return value differs subtly from GetRemainingLifespan(). Here's what this function returns:
// A) If an invalid handle is passed in, will return -1
// B) If craft has infinite life, will return a value < 0
// C) If a craft has limited life, returns remaining life in seconds


-vector GetCurrentCommandWhere( Handle h )

Get the target of a units current command. If the command doesn't take a where when created, then this position may be invalid.  Note that BZ2's AI is 2D, so the Y component of this vector will be zero, not actual terrain height.


-table GetAllGameObjectHandles( )

Gets all GameObject handles currently in use. Not the cheapest function, call sparingly, such as in PostLoad or at most once per Execute(). 


-Damage ( Handle him, Handle damager, long amt )

Cause object to take damage, with the damage source set to the damager handle. The other Damage() call is effectively Damage(him, 0, amt)


-Vector GetOmega ( Handle h )

// Gets the omega rate of a vehicle/person. 


-SetOmega ( Handle h , Vector omega )

Sets the handle's omega rate to the specified vector. Note: this may be overridden by BZ2's physics. Use only after much testing.


-bool IsCraftButNotPerson ( Handle me )

Returns true if the game object exists and is a Craft, but NOT a person. (Note, include Gun Towers.)


-bool IsCraftOrPerson ( Handle me )

Returns true if the game object exists and is a Craft or person. (equivalent to IsCraft(h) || IsPerson(h)) (Note, include Gun Towers.)


-bool IsBuilding ( Handle me )

Returns true if the game object exists and is a Building. (Note, Does NOT include Gun Towers.)


-bool IsPowerup ( Handle me )

Returns true if the game object exists and is a powerup. Returns false otherwise.


-SetCanSnipe ( Handle me , [ integer canSnipe = -1 ] )

Sets if a handle can be sniped, <0 == Auto-determine from ODF (default, tracked/walkers/flying not snipe-able), 0 == Not snipeable, >= 1 == snipeable. Note: turrettanks can and will change this when deployed; do not expect this to remain set permanently.


-bool GetCanSnipe ( Handle me )

Gets whether a handle can be sniped


-table WhoIsTargeting ( Handle me )

Gets all GameObject handles that are targeting the specified 'me'. Note that this call must iterate over all GameObjects, so this is not necessarily cheap to use. 



============ BZScriptor Backwards Compatability Stuff ======================


-SetAngle ( Handle h, int Centigrees )

Sets the horizontal angle of an object to the specified angle, in centigrees, based on world coordinates (0 = North). e.g. SetAngle(tank, 9000) is 90 degrees to the right.


-boolean CameraPos ( Handle me, Handle him, Vector StartPos, Vector EndPos, float Incrument )

Does a CameraObject camera sequence, and moves the camera from Start to End Positions, at the set incrument.


- CameraOf( Handle me, Vector Offset )
- CameraOf( Handle me, float ZOffset )

Sets the Camera to the perspective of the handle, with the specified offset.


-boolean Move ( Handle h, float TurnSpeed, float MoveSpeed, Vector DestinationPosition )
-boolean Move ( Handle h, float TurnSpeed, float Time )

Moves the handle to the destination position, at the specified speed/sec, and optionally rotating at the specified turnspeed in deg/sec. If only the Time is specified, it spins the object until the result of GetTime() is >= the specified time.


-Handle ReplaceObject ( Handle h, [ string ODF ], [ int Team = -1 ], [ float HeightOffset = 0.0f ], [ int Empty = -1 ], [ bool RestoreWeapons = true ], [ int Group = -1 ], [ bool KeepCommand = true ], [ int NewCommand = -1 ], [ Handle NewWho = -1 ] )

Replaces an object with another object, retaining as much information about it as possible, with optional team switching, height offset, replacing of weapons with ones it currently has, group, and current command info (may not work for all commands).


============ BZ1 Backwards Compatability Stuff ======================

-boolean CanCommand ( handle me )

Returns true if the game object can be commanded. Returns false otherwise.


-SetTransform ( handle h, matrix transform )

Teleports the game object to the given transform matrix.

-matrix GetTransform ( handle h )

Returns the game object's transform matrix. Returns nil if none exists.




== Math stuff? Copied over, it should work?


Vector

This is a custom userdata representing a position or direction. It has three number components: x, y, and z.


-vector SetVector ( [ number x ], [ number y ], [ number z ] )

Returns a vector whose components have the given number values. If no value is given for a component, the default value is 0.0.


-number DotProduct ( vector a, vector a )

Returns the dot product between vectors a and b.

Equivalent to a.x * b.x + a.y * b.y + a.z * b.z.


-vector CrossProduct ( vector a, vector b )

Returns the cross product between vectors a and b.

Equivalent to SetVector(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x).


-vector Normalize ( vector v )

Returns the vector scaled to unit length.

Equivalent to SetVector(v.x * scale, v.y * scale, v.z * scale) where scale is 1.0f / sqrt(v.x2 + v.y2 + v.z2).


-number Length ( vector v )

Returns the length of the vector.

Equivalent to sqrt(v.x2 + v.y2 + v.z2).


-number LengthSquared ( vector v )

Returns the squared length of the vector.

Equivalent to v.x2 + v.y2 + v.z2.


-number Distance2D ( vector a, vector b )

Returns the 2D distance between vectors a and b.

Equivalent to sqrt((b.x - a.x)2 + (b.z - a.z)2).


-number Distance2DSquared ( vector a, vector b )

Returns the squared 2D distance of the vector.

Equivalent to (b.x - a.x)2 + (b.z - a.z)2.


-number Distance3D ( vector a, vector b )

Returns the 3D distance between vectors a and b.

Equivalent to sqrt((b.x - a.x)2 + (b.y - a.y)2 + (b.z - a.z)2).


-number Distance3DSquared ( vector a, vector b )

Returns the squared 3D distance of the vector.

Equivalent to (b.x - a.x)2 + (b.y - a.y)2 + (b.z - a.z)2.


-vector

Negate the vector.

Equivalent to SetVector(-vector.x, -vector.y, -vector.z).

vector1 + vector2

Add two vectors.

Equivalent to SetVector(vector1.x + vector2.x, vector1.y + vector2.y, vector1.z + vector2.z).
vector1 - vector2

Subtract two vectors.

Equivlent to SetVector(vector1.x - vector2.x, vector1.y - vector2.y, vector1.z - vector2.z).

number * vector

Multiply a number by a vector.

Equivalent to SetVector( number * vector.x, number * vector.y, number * vector.z).

vector * number

Multiply a vector by a number.

Equivalent to SetVector(vector.x * number, vector.y * number, vector.z * number).

vector1 * vector2

Multiply two vectors.

Equivlent to SetVector(vector1.x * vector2.x, vector1.y * vector2.y, vector1.z * vector2.z)

number / vector

Divide a number by a vector.

Equivalent to SetVector( number / vector.x, number / vector.y, number / vector.z).

vector / number

Divide a vector by a number.

Equivalent to SetVector(vector.x / number, vector.y / number, vector.z / number).

vector1 / vector2

Divide two vectors.

Equivlent to SetVector(vector1.x / vector2.x, vector1.y / vector2.y, vector1.z / vector2.z)

vector1 == vector2

Check if two vectors are equal.

vector1 ~= vector2

Check if two vectors are not equal.


Matrix

This is a custom userdata representing an orientation and position in space. It has four vector components (right, up, front, and posit) sharing space with twelve number components (right_x, right_y, right_z, up_x, up_y, up_z, front_x, front_y, front_z, posit_x, posit_y, posit_z).
matrix SetMatrix ( [ number right_x ], [ number right_y ], [ number right_z ], [ number up_x ], [ number up_y ], [ number up_z ], [ number front_x ], [ number front_y ], [ number front_z ], [ number posit_x ], [ number posit_y ], [ number posit_z ] )

Returns a matrix whose componets have the given number values. If no value is given for a component, the default value is zero. Be careful with this since it's easy to build a non-orthonormal matrix that will break all kinds of built-in assumptions.


-matrix IdentityMatrix

Global value representing the identity matrix.

Equivalent to SetMatrix(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0).


-matrix BuildAxisRotationMatrix ( [ number angle ], [ number axis_x ], [ number axis_y ], [ number axis_z ] )

Build a matrix representing a rotation by an angle around an axis. The angle is in radians. If no value is given for the angle or an axis component, the default value is zero. The axis must be unit-length (i.e. axis_x2 + axis_y2 + axis_z2 = 1.0 or the resulting matrix will be wrong.


-matrix BuildAxisRotationMatrix ( [ number angle ], vector axis )

Build a matrix representing a rotation by an angle around an axis. The angle is in radians. If no value is given for the angle, the default value is zero. The axis must be unit-length (i.e. axis.x2 + axis.y2 + axis.z2 = 1.0 or the resulting matrix will be wrong.


-matrix BuildPositionRotationMatrix ( [ number pitch ], [ number yaw ], [ number roll ], [ number posit_x ], [ posit_y ], [ posit_z ] )

Build a matrix with the given pitch, yaw, and roll angles and position. The angles are in radians. If no value is given for a component, the default value is zero.


-matrix BuildPositionRotationMatrix ( [ number pitch ], [ number yaw ], [ number roll ], vector position )

Build a matrix with the given pitch, yaw, and roll angles and position. The angles are in radians. If no value is given for a component, the default value is zero.


-matrix BuildOrthogonalMatrix ( [ vector up ], [ vector heading ] )

Build a matrix with zero position, its up axis along the specified up vector, oriented so that its front axis points as close as possible to the heading vector. If up is not specified, the default value is the Y axis. If heading is not specified, the default value is the Z axis.


-matrix BuildDirectionalMatrix ( [ vector position ], [ vector direction ] )

Build a matrix with the given position vector, its front axis pointing along the direction vector, and zero roll. If position is not specified, the default value is a zero vector. If direction is not specified, the default value is the Z axis.


-matrix * matrix

Multiply two matrices.


-matrix * vector

Transform a vector by a matrix.
